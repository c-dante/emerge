{"version":3,"sources":["sim/things.tsx","sim/render.tsx","sim/Sim.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThingType","getRes","thing","resType","resources","mathRes","value","newValue","addThing","things","existing","get","pos","undefined","push","set","absorbWater","self","state","nearestWater","queryValues","flat","find","x","type","Water","remaining","filter","length","remove","removeThing","FixedControls","Seed","newRoot","root","Root","Cloud","tick","RainCloud","maxDrops","newWater","water","baseThing","seed","cloud","resource","SCALE","SizedElement","onResize","fp","noop","children","containerProps","style","height","container","useRef","localOnResize","useEffect","current","observer","ResizeObserver","entries","contentRect","parentElement","obs","observe","disconnect","ref","RENDER_SAVE","debounceSaveZoom","debounce","zoom","sessionStorage","setItem","JSON","stringify","loadSaveZoom","saved","getItem","zoomIdentity","args","parse","translate","y","scale","k","CanvasRender","canvas","useState","width","containerSize","setContainerSize","transform","setTransform","d3zoom","scaleExtent","on","evt","onContainerSize","useCallback","rect","ctx","getContext","xform","getBoundingClientRect","clearRect","save","fillStyle","TypeToColor","fillRect","restore","d3select","call","emptyState","reduce","thingMap","KdTreeMap","GAME_SAVE","Sim","initialProps","interval","setCanvasDimsCb","setCanvasDims","bind","renderCtrlCb","setRenderCtrl","initialState","sim","intervalRate","serialized","intermediate","interThings","deserializeState","error","console","debug","warn","this","setInterval","nextState","delta","shuffle","forEach","ctrl","advanceSim","setState","clearInterval","canvasRect","renderController","className","onCtrl","onClick","center","log","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c16e6fdf.chunk.js","sourcesContent":["import { KdTreeMap } from '@thi.ng/geom-accel';\n\n// Helper type for a maybe-define for thing types\nexport type ThingHas<T> = Partial<Record<ThingType, T>>;\n\nconst getRes = (thing: Thing, resType: ThingType) => thing.resources[resType] ?? 0;\nconst mathRes = (thing: Thing, resType: ThingType, value: number) => {\n\tconst newValue = getRes(thing, resType) + value;\n\tthing.resources[resType] = newValue;\n\treturn newValue;\n};\n\n/**\n * Our simulation has a tick (current time) and things\n *\n * Things are organized into a 2D k-d tree (for now) with a collection of things to allow overlapping points\n *\n * There's a graph of connections between things as well for resource sharing / related components\n*/\nexport type SimState = {\n\tthings: KdTreeMap<number[], Thing[]>,\n\ttick: number\n};\n\n\n/**\n * A thing is something, somewhere, with some resources (which are counts of things)\n */\nexport type Thing = {\n\ttype: ThingType,\n\tpos: number[],\n\tresources: ThingHas<number>,\n};\n\nexport enum ThingType {\n\tWater = 'Water',\n\tSeed = 'Seed',\n\tRoot = 'Root',\n\tCloud = 'Cloud',\n\tRainCloud = 'RainCloud',\n};\n\n// Helpers for working with the stacked kd map\nexport const addThing = (thing: Thing, things: SimState['things']) => {\n\tconst existing = things.get(thing.pos);\n\tif (existing !== undefined) {\n\t\texisting.push(thing);\n\t} else {\n\t\tthings.set(thing.pos, [thing]);\n\t}\n\treturn things;\n};\nexport const removeThing = (thing: Thing, things: SimState['things']) => {\n\tconst remaining = (things.get(thing.pos) ?? [])\n\t\t.filter(x => x !== thing);\n\tif (remaining.length) {\n\t\tthings.set(thing.pos, remaining);\n\t} else {\n\t\tthings.remove(thing.pos);\n\t}\n\treturn things;\n};\n\n\nexport type Control = (self: Thing, state: SimState, delta: number) => void;\n\n// -------- Controls\nconst DISTANCE = 2;\nconst MAX_CELLS = (DISTANCE - 1) * 9;\nconst absorbWater: Control = (self: Thing, state: SimState) => {\n\tconst nearestWater = state.things.queryValues(self.pos, 2, MAX_CELLS)\n\t\t.flat()\n\t\t.find(x => x.type === ThingType.Water);\n\n\tif (nearestWater) {\n\t\tremoveThing(nearestWater, state.things);\n\t\tmathRes(self, ThingType.Water, 1);\n\t}\n};\n\nconst rootDown: Control = (self: Thing, state: SimState) => {\n\tif (getRes(self, ThingType.Water) > 2) {\n\t\tconst newRoot = root();\n\t\tnewRoot.pos[0] = self.pos[0];\n\t\tnewRoot.pos[1] = self.pos[1] + 1; // down 1\n\t\taddThing(newRoot, state.things);\n\t\tmathRes(self, ThingType.Water, -2);\n\t}\n};\n\nconst condenseWater: Control = (self: Thing, state: SimState) => {\n\t// Gather water\n\tif (state.tick % 3 === 0) {\n\t\tmathRes(self, ThingType.Water, 5);\n\t}\n\n\n\t// Become a rain cloud\n\tif (getRes(self, ThingType.Water) > 10) {\n\t\tself.type = ThingType.RainCloud;\n\t}\n};\n\nconst rain: Control = (self: Thing, state: SimState) => {\n\tlet maxDrops = 4;\n\twhile (maxDrops > 0 && getRes(self, ThingType.Water) > 0) {\n\t\tconst newWater = water();\n\t\tnewWater.pos[0] = self.pos[0];\n\t\tnewWater.pos[1] = self.pos[1];\n\t\taddThing(newWater, state.things);\n\t\tmathRes(self, ThingType.Water, -1);\n\t\tmaxDrops--;\n\t}\n\n\t// Become a cloud again\n\tif (self.resources[ThingType.Water] === 0) {\n\t\tself.type = ThingType.Cloud;\n\t}\n};\n\nexport const FixedControls: ThingHas<Control[]> = {\n\t[ThingType.Seed]: [absorbWater, rootDown],\n\t[ThingType.Root]: [absorbWater],\n\t[ThingType.Cloud]: [condenseWater],\n\t[ThingType.RainCloud]: [rain],\n};\n\n// --------------------- Things\nconst baseThing = (pos: number[]) => ({\n\tresources: {},\n\tpos,\n});\n\nexport const water = (pos: number[] = [0, 0]) => ({\n\t...baseThing(pos),\n\ttype: ThingType.Water,\n});\n\nexport const seed = (pos: number[] = [0, 0]) => ({\n\t...baseThing(pos),\n\ttype: ThingType.Seed,\n\tresources: {\n\t\t[ThingType.Water]: 0,\n\t},\n});\n\nexport const root = (pos: number[] = [0, 0]) => ({\n\t...baseThing(pos),\n\ttype: ThingType.Root,\n});\n\nexport const cloud = (pos: number[] = [0, 0]) => ({\n\t...baseThing(pos),\n\ttype: ThingType.Cloud,\n\tresource: {\n\t\t[ThingType.Water]: 0,\n\t}\n});","import fp from 'lodash';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { zoom as d3zoom, zoomIdentity, ZoomTransform } from 'd3-zoom';\nimport { select as d3select } from 'd3-selection';\nimport { SimState, ThingType } from './things';\n\nconst PADDING = 1;\nconst SCALE = 10;\nconst HALF_SCALE = SCALE / 2;\n\ntype SizedElementProps = {\n\tonResize?: (rect: DOMRectReadOnly) => void,\n\tcontainerProps?: object,\n};\nconst SizedElement: React.FC<SizedElementProps> = ({\n\tonResize = fp.noop,\n\tchildren,\n\tcontainerProps = {\n\t\tstyle: {\n\t\t\theight: '100%',\n\t\t},\n\t},\n}) => {\n\tconst container = useRef<HTMLDivElement>(null);\n\tconst localOnResize = useRef(onResize);\n\tuseEffect(() => {\n\t\tlocalOnResize.current = onResize;\n\t}, [onResize]);\n\n\tconst observer = useRef(new ResizeObserver(entries => {\n\t\tif (entries.length > 0) {\n\t\t\tconst contentRect = entries[0].contentRect;\n\t\t\tlocalOnResize.current(contentRect);\n\t\t}\n\t}));\n\n\tuseEffect(() => {\n\t\tif (!container.current?.parentElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst obs = observer.current;\n\t\tobs.observe(container.current.parentElement);\n\t\treturn () => obs.disconnect();\n\t}, [container, observer]);\n\n\treturn (\n\t\t<div {...containerProps} ref={container}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nconst RENDER_SAVE = 'RENDER_SAVE';\nconst debounceSaveZoom = fp.debounce((zoom) => {\n\tsessionStorage.setItem(RENDER_SAVE, JSON.stringify(zoom));\n}, 250);\nconst loadSaveZoom = () => {\n\tconst saved = sessionStorage.getItem(RENDER_SAVE);\n\tif (!saved) {\n\t\treturn zoomIdentity;\n\t}\n\n\ttry {\n\t\tconst args = JSON.parse(saved);\n\t\treturn zoomIdentity\n\t\t\t.translate(args.x, args.y)\n\t\t\t.scale(args.k);\n\t} catch {\n\t\treturn zoomIdentity;\n\t}\n};\n\nexport type RenderController = {\n\tcenter: () => void;\n}\nexport type RenderProps = {\n\tstate: SimState;\n\tonResize?: (rect: DOMRectReadOnly) => void;\n\tonCtrl?: (ctrl: RenderController) => void;\n}\nexport const CanvasRender: React.FC<RenderProps> = ({\n\tstate,\n\tonResize = fp.noop,\n}) => {\n\tconst canvas = useRef<HTMLCanvasElement>(null);\n\tconst [containerSize, setContainerSize] = useState({ width: 100, height: 100 });\n\tconst [transform, setTransform] = useState<ZoomTransform>(loadSaveZoom());\n\tconst zoom = useRef(\n\t\td3zoom()\n\t\t\t.scaleExtent([1, 100])\n\t\t\t.on('zoom', (evt) => {\n\t\t\t\tsetTransform(evt.transform as ZoomTransform);\n\t\t\t\tdebounceSaveZoom(evt.transform);\n\t\t\t})\n\t);\n\n\tconst onContainerSize = useCallback((rect) => {\n\t\tonResize(rect);\n\t\tsetContainerSize({\n\t\t\twidth: rect.width,\n\t\t\theight: rect.height,\n\t\t});\n\t}, [setContainerSize, onResize]);\n\n\tuseEffect(() => {\n\t\tif (!canvas.current || !state) {\n\t\t\treturn;\n\t\t}\n\t\tconst ctx = canvas.current.getContext('2d');\n\t\tif (!ctx) {\n\t\t\treturn;\n\t\t}\n\t\tconst xform = transform ?? zoomIdentity;\n\t\tconst rect = canvas.current.getBoundingClientRect();\n\t\tctx?.clearRect(0, 0, rect.width, rect.height);\n\t\tctx?.save();\n\t\tctx?.translate(xform.x, xform.y);\n\t\tctx?.scale(xform.k, xform.k);\n\t\tfor (const [[x, y], things] of state.things) {\n\t\t\tfor (const thing of things) {\n\t\t\t\tctx.fillStyle = TypeToColor[thing.type];\n\t\t\t\tctx.fillRect(x * (SCALE + PADDING) - HALF_SCALE, y * (SCALE + PADDING) - HALF_SCALE, SCALE, SCALE);\n\t\t\t}\n\t\t}\n\t\tctx.restore();\n\t}, [state, transform]);\n\n\tuseEffect(() => {\n\t\tif (canvas.current && zoom.current) {\n\t\t\td3select(canvas.current)\n\t\t\t.call(zoom.current as any)\n\t\t\t.call(zoom.current.transform as any, loadSaveZoom());\n\t\t}\n\t}, [canvas, zoom]);\n\n\treturn (\n\t\t<SizedElement onResize={onContainerSize}>\n\t\t\t<canvas ref={canvas} width={containerSize.width} height={containerSize.height} />\n\t\t</SizedElement>\n\t);\n};\n\nconst TypeToColor = {\n\t[ThingType.Cloud]: 'lightblue',\n\t[ThingType.RainCloud]: 'slategrey',\n\t[ThingType.Root]: 'brown',\n\t[ThingType.Seed]: 'orange',\n\t[ThingType.Water]: 'blue',\n};\n\nexport const SvgRender: React.FC<RenderProps> = ({\n\tstate,\n\tonResize = fp.noop,\n\tonCtrl = fp.noop,\n}) => {\n\tconst svg = useRef<SVGSVGElement>(null);\n\tconst [containerSize, setContainerSize] = useState({ width: 100, height: 100 });\n\tconst [transform, setTransform] = useState<ZoomTransform>(loadSaveZoom());\n\tconst zoom = useRef(\n\t\td3zoom()\n\t\t\t.scaleExtent([1, 100])\n\t\t\t.on('zoom', (evt) => {\n\t\t\t\tsetTransform(evt.transform as ZoomTransform);\n\t\t\t\tdebounceSaveZoom(evt.transform);\n\t\t\t})\n\t);\n\n\tconst renderCtrl = useRef({\n\t\tcenter: () => {\n\t\t\tif (!svg.current?.parentElement || !zoom.current) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst root = svg.current.getElementById('svg-root-transform');\n\t\t\tif (!root) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst maxRect = svg.current.getBoundingClientRect();\n\t\t\tconst xform = root.getAttribute('transform') ?? '';\n\t\t\troot.setAttribute('transform', '');\n\t\t\tconst contentRect = root.getBoundingClientRect();\n\t\t\troot.setAttribute('transform', xform);\n\n\t\t\tconsole.log({\n\t\t\t\tmaxRect,\n\t\t\t\tcontentRect,\n\t\t\t});\n\t\t\t// const maxSize = svg.current.parentElement.getBoundingClientRect();\n\t\t\t// const root = svg.current.getElementById('svg-root-transform');\n\t\t\t// console.log(root.getBoundingClientRect(), maxSize);\n\t\t\t// reset size\n\t\t},\n\t});\n\n\tuseEffect(() => {\n\t\tonCtrl(renderCtrl.current);\n\t}, [onCtrl]);\n\n\tconst onContainerSize = useCallback((rect) => {\n\t\tonResize(rect);\n\t\tsetContainerSize({\n\t\t\twidth: rect.width,\n\t\t\theight: rect.height,\n\t\t});\n\t}, [setContainerSize, onResize]);\n\n\tuseEffect(() => {\n\t\tif (svg.current) {\n\t\t\tconst xform = transform ?? zoomIdentity;\n\t\t\td3select(svg.current)\n\t\t\t\t\t.selectAll('g')\n\t\t\t\t\t.data([xform])\n\t\t\t\t\t.join('g')\n\t\t\t\t\t\t.attr('transform', fp.identity)\n\t\t\t\t\t\t.attr('id', 'svg-root-transform');\n\t\t}\n\t}, [transform]);\n\n\tuseEffect(() => {\n\t\tif (svg.current && state) {\n\t\t\tconst root = svg.current.getElementById('svg-root-transform');\n\t\t\tif (root) {\n\t\t\t\td3select(root)\n\t\t\t\t\t.selectAll('rect')\n\t\t\t\t\t.data([...state.things.values()].flat())\n\t\t\t\t\t// Everything is a rectangle I guess\n\t\t\t\t\t.join('rect')\n\t\t\t\t\t\t.attr('x', thing => thing.pos[0] * (SCALE + 1) - HALF_SCALE)\n\t\t\t\t\t\t.attr('y', thing => thing.pos[1] * (SCALE + 1) - HALF_SCALE)\n\t\t\t\t\t\t.attr('width', SCALE)\n\t\t\t\t\t\t.attr('height', SCALE)\n\t\t\t\t\t\t.attr('fill', thing => TypeToColor[thing.type]);\n\t\t\t}\n\t\t}\n\t}, [state, transform]);\n\n\tuseEffect(() => {\n\t\tif (svg.current && zoom.current) {\n\t\t\td3select(svg.current)\n\t\t\t\t.call(zoom.current as any)\n\t\t\t\t.call(zoom.current.transform as any, loadSaveZoom());\n\t\t}\n\t}, [svg, zoom]);\n\n\treturn (\n\t\t<SizedElement onResize={onContainerSize}>\n\t\t\t<svg ref={svg} width={containerSize.width} height={containerSize.height} viewBox={`0 0 ${containerSize.width} ${containerSize.height}`} />\n\t\t</SizedElement>\n\t);\n};\n","import React from 'react';\nimport fp from 'lodash/fp';\nimport { KdTreeMap } from '@thi.ng/geom-accel';\nimport { RenderController, CanvasRender } from './render';\nimport { addThing, cloud, FixedControls, seed, SimState, Thing, water } from './things';\n\n// -- Sim\nexport type SerializedSimState = string;\nconst serializeState = (state: SimState): SerializedSimState => {\n\treturn JSON.stringify({\n\t\t...state,\n\t\tthings: [...state.things],\n\t});\n};\nconst deserializeState = (serialized: string): SimState => {\n\tconst intermediate = JSON.parse(serialized);\n\n\t// Deserialize things\n\tconst interThings = (intermediate.things as [number[], Thing[]][]);\n\tconst things = new KdTreeMap(2, interThings);\n\treturn {\n\t\ttick: intermediate.tick as number,\n\t\tthings,\n\t};\n};\n\nconst advanceSim = (state: SimState, delta: number): SimState => {\n\tstate.tick += delta;\n\tfor (const [, things] of state.things) {\n\t\t// Randomly shuffle the things so we don't bias who goes first\n\t\tfp.shuffle(things).forEach(thing => {\n\t\t\t(FixedControls[thing.type] ?? []).forEach((ctrl) => ctrl(thing, state, delta));\n\t\t});\n\t}\n\treturn state;\n};\n\nconst emptyState = () => ({\n\tthings: [\n\t\twater(),\n\t\twater(),\n\t\twater(),\n\t\twater(),\n\t\twater(),\n\t\t// A seed\n\t\tseed(),\n\t\t// A cloud\n\t\tcloud([0, -1]),\n\t].reduce((thingMap, thing) => addThing(thing, thingMap), new KdTreeMap<number[], Thing[]>(2)),\n\ttick: 0,\n});\n\n/*\n-------- whatever. render and game loop\n*/\n\n// const DisplayThing = ({ thing }: { thing: Thing }) => (\n// \t<div style={{\n// \t\tposition: 'absolute',\n// \t\tleft: thing.pos[0] * 50,\n// \t\ttop: thing.pos[1] * 50,\n// \t}}>\n// \t\t{thing.type}\n// \t\t<ul className=\"thing-list\">\n// \t\t\t{Object.keys(thing.resources).map((key) => (\n// \t\t\t\t<li key={key}>{key}: {String(thing.resources[key as ThingType])}</li>\n// \t\t\t))}\n// \t\t</ul>\n// \t</div>\n// );\n\nconst GAME_SAVE = 'SIM_STORAGE';\n// const SETTINGS_SAVE = 'SIM_SETTINGS';\nexport type SimEltState = {\n\tsim: SimState;\n\tintervalRate: number;\n\tcanvasRect?: DOMRectReadOnly;\n\trenderController?: RenderController;\n}\nexport type SimProps = {};\nexport class Sim extends React.Component<SimProps, SimEltState> {\n\tinterval: NodeJS.Timeout | undefined;\n\n\tconstructor(initialProps: SimProps) {\n\t\tsuper(initialProps);\n\t\tconst initialState = {\n\t\t\tsim: emptyState(),\n\t\t\tintervalRate: 1000,\n\t\t};\n\t\tconst saved = sessionStorage.getItem(GAME_SAVE);\n\t\tif (saved) {\n\t\t\ttry {\n\t\t\t\tinitialState.sim = deserializeState(saved);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.debug(saved);\n\t\t\t\tconsole.warn('Failed to load json', error);\n\t\t\t}\n\t\t}\n\n\t\tthis.state = initialState;\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.interval = setInterval(() => {\n\t\t\tconst nextState = advanceSim(this.state.sim, 1);\n\n\t\t\tif (this.state.sim.tick % 10 === 0) {\n\t\t\t\tsessionStorage.setItem(GAME_SAVE, serializeState(nextState));\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tsim: { ...nextState },\n\t\t\t});\n\t\t}, this.state.intervalRate);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif (this.interval !== undefined) {\n\t\t\tclearInterval(this.interval);\n\t\t\tthis.interval = undefined;\n\t\t}\n\t}\n\n\tsetCanvasDims(rect: DOMRectReadOnly) {\n\t\tthis.setState({\n\t\t\tcanvasRect: rect,\n\t\t});\n\t}\n\tsetCanvasDimsCb = this.setCanvasDims.bind(this);\n\n\tsetRenderCtrl(renderController: RenderController) {\n\t\tthis.setState({ renderController });\n\t}\n\trenderCtrlCb = this.setRenderCtrl.bind(this);\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"sim-container\">\n\t\t\t\t<div className=\"sim-render-area\">\n\t\t\t\t\t<CanvasRender\n\t\t\t\t\t\tstate={this.state.sim}\n\t\t\t\t\t\tonResize={this.setCanvasDimsCb}\n\t\t\t\t\t\tonCtrl={this.renderCtrlCb}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <SvgRender\n\t\t\t\t\t\tstate={this.state?.sim}\n\t\t\t\t\t\tonResize={this.setCanvasDimsCb}\n\t\t\t\t\t\tonCtrl={this.renderCtrlCb}\n\t\t\t\t\t/> */}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"sim-stats-footer\">\n\t\t\t\t\t<p>{this.state?.sim?.tick}</p>\n\t\t\t\t\t<button onClick={() => this.setState({ sim: emptyState()} )}>Reset</button>\n\t\t\t\t\t<p>Size: {this.state?.canvasRect?.width} x {this.state?.canvasRect?.height}</p>\n\t\t\t\t\t<button onClick={() => this.state?.renderController?.center()}>Center</button>\n\t\t\t\t\t<button onClick={() => console.log(this.state)}>Log</button>\n\t\t\t\t\t{/* <label>\n\t\t\t\t\t\tinterval (ms)\n\t\t\t\t\t\t<input type='text' value={this.intervalRate} />\n\t\t\t\t\t</label> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './App.css';\nimport { Sim } from './sim/Sim';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sim />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}